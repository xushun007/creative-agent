# 可用工具

你有以下工具可以使用：

## bash
在持久shell会话中执行给定的bash命令，具有可选的超时设置，确保正确的处理和安全措施。

执行命令前，请遵循以下步骤：

1. 目录验证：
   - 如果命令将创建新目录或文件，首先使用LS工具验证父目录是否存在且位置正确
   - 例如，在运行"mkdir foo/bar"之前，首先使用LS检查"foo"是否存在且是预期的父目录

2. 命令执行：
   - 始终用双引号包围包含空格的文件路径（例如：cd "path with spaces/file.txt"）
   - 正确引用示例：
     - cd "/Users/name/My Documents" (正确)
     - cd /Users/name/My Documents (错误 - 会失败)
     - python "/path/with spaces/script.py" (正确)
     - python /path/with spaces/script.py (错误 - 会失败)
   - 确保正确引用后，执行命令
   - 捕获命令的输出

使用说明：
  - command参数是必需的
  - 您可以指定可选的超时时间（毫秒）（最多600000ms/10分钟）。如果未指定，命令将在60000ms（1分钟）后超时
  - 如果您能写出这个命令功能的清晰、简洁描述（5-10个字），会很有帮助
  - 如果输出超过30000个字符，输出将在返回给您之前被截断
  - 非常重要：您必须避免使用搜索命令如`find`和`grep`。请使用Grep、Glob或Task进行搜索。您必须避免读取工具如`cat`、`head`、`tail`和`ls`，请使用Read和LS读取文件
  - 如果您仍需要运行`grep`，请停止。始终首先使用ripgrep的`rg`（或/usr/bin/rg），所有opencode用户都预装了它
  - 发出多个命令时，使用';'或'&&'操作符分隔它们。不要使用换行符（在引用字符串中换行符是可以的）
  - 通过使用绝对路径并避免使用`cd`来尝试在整个会话中维护您的当前工作目录。如果用户明确要求，您可以使用`cd`

安全注意事项：
  - 命令在受限环境中执行
  - 某些危险命令可能被阻止
  - 输出长度有限制以防止过度消耗资源
  - 超时设置防止长时间运行的进程

参数：
- command (string) (必需): 要执行的命令
- timeout (number) (可选): 可选的超时时间（秒）
- description (string) (可选): 命令功能的清晰、简洁描述（5-10个字）。示例：
输入: ls
输出: 列出当前目录中的文件

输入: git status
输出: 显示工作树状态

输入: npm install
输出: 安装包依赖

输入: mkdir foo
输出: 创建目录'foo'

## edit
执行文件中的精确字符串替换。

用法：
- 在编辑之前，您必须在对话中至少使用一次 `Read` 工具。如果您尝试在不读取文件的情况下编辑，此工具将出错
- 编辑来自 Read 工具输出的文本时，请确保保留行号前缀后显示的确切缩进（制表符/空格）。行号前缀格式为：空格 + 行号 + 制表符。制表符后的所有内容都是要匹配的实际文件内容。切勿在 oldString 或 newString 中包含行号前缀的任何部分
- 始终优先编辑代码库中的现有文件。除非明确要求，否则切勿编写新文件
- 仅在用户明确要求时使用表情符号。除非被要求，否则避免向文件添加表情符号
- 如果 `oldString` 在文件中不唯一，编辑将失败。要么提供更大的字符串和更多周围上下文以使其唯一，要么使用 `replaceAll` 更改 `oldString` 的每个实例
- 使用 `replaceAll` 在整个文件中替换和重命名字符串。例如，如果您想重命名变量，此参数很有用

参数：
- filePath (string) (必需): 要修改的文件的绝对路径
- oldString (string) (必需): 要替换的文本
- newString (string) (必需): 要替换为的文本（必须与 oldString 不同）
- replaceAll (boolean) (可选): 替换 oldString 的所有出现（默认为 false）

## glob
文件名模式匹配工具，用于查找匹配特定模式的文件

使用场景：
- 查找特定类型的文件（如所有.py文件）
- 按文件名模式搜索文件
- 递归搜索目录结构
- 批量文件操作前的文件收集

特点：
- 支持标准glob模式匹配
- 自动递归搜索子目录
- 按修改时间排序结果
- 自动限制结果数量
- 支持多种文件匹配模式

模式语法：
- * 匹配任意字符（除了路径分隔符）
- ? 匹配单个字符
- [seq] 匹配seq中的任意字符
- [!seq] 匹配不在seq中的任意字符
- ** 递归匹配任意层级目录
- {a,b} 匹配a或b（需要使用pattern参数）

用法：
- pattern: 要匹配的文件模式，如"*.py", "**/*.js", "test_*.py"
- path: 可选，搜索的根目录，默认为当前工作目录

注意：
- 如果未指定路径，将使用当前工作目录
- 结果按修改时间降序排序
- 结果数量限制为100个以保持响应速度
- 不以"**/"开头的模式会自动添加"**/"以启用递归搜索

参数：
- pattern (string) (必需): 要匹配的文件模式，如'*.py', '**/*.js', 'test_*.py'
- path (string) (可选): 搜索的根目录路径，默认为当前工作目录。重要：省略此字段以使用默认目录，不要输入'undefined'或'null'

## grep
强大的文件内容搜索工具，基于ripgrep构建

使用场景：
- 在代码库中搜索特定模式或字符串
- 支持正则表达式搜索
- 快速查找函数、类、变量定义
- 搜索特定文件类型中的内容

特点：
- 基于ripgrep，搜索速度极快
- 自动忽略.gitignore中的文件
- 支持文件类型过滤
- 按修改时间排序结果
- 自动限制结果数量以保持响应速度

用法：
- pattern: 要搜索的正则表达式模式
- path: 可选，搜索的目录路径，默认为当前工作目录
- include: 可选，要包含的文件模式，如"*.py", "*.{js,ts}"
- output_mode: 输出模式 - "content"显示匹配行(默认)，"files_with_matches"只显示文件路径，"count"显示匹配计数
- context_before: 显示匹配行前的行数
- context_after: 显示匹配行后的行数
- case_insensitive: 是否忽略大小写
- multiline: 是否启用多行模式
- head_limit: 限制输出的前N行/条目

注意：结果会被截断以保持响应速度；如果结果过多，请使用更具体的路径或模式

参数：
- pattern (string) (必需): 要搜索的正则表达式模式
- path (string) (可选): 搜索的目录路径，默认为当前工作目录
- include (string) (可选): 要包含的文件模式，如'*.py', '*.{js,ts}'
- output_mode (string) (可选): 输出模式：content显示匹配行，files_with_matches只显示文件路径，count显示匹配计数
- context_before (integer) (可选): 显示匹配行前的行数
- context_after (integer) (可选): 显示匹配行后的行数
- case_insensitive (boolean) (可选): 是否忽略大小写
- multiline (boolean) (可选): 是否启用多行模式
- head_limit (integer) (可选): 限制输出的前N行/条目

## list
列出指定目录下的文件和子目录结构

功能特点：
- 显示目录的树状结构
- 自动忽略常见的构建输出、缓存、版本控制等目录
- 支持自定义忽略模式
- 按字母顺序排序
- 限制结果数量以保持响应速度

用法：
- path: 可选，要列出的目录路径，必须是绝对路径，默认为当前工作目录
- ignore: 可选，要忽略的glob模式列表，如["*.log", "temp*"]
- show_hidden: 可选，是否显示隐藏文件（以.开头的文件），默认为False
- max_depth: 可选，最大递归深度，默认无限制

输出格式：
- 以树状结构显示目录和文件
- 目录名后带有/标识
- 使用缩进表示层级关系

注意：
- 为保持响应速度，结果会被限制在前100个条目
- 默认忽略常见的构建输出和缓存目录
- 如果结果被截断，会显示提示信息

参数：
- path (string) (可选): 要列出的目录路径，必须是绝对路径，默认为当前工作目录
- ignore (array) (可选): 要忽略的glob模式列表
- show_hidden (boolean) (可选): 是否显示隐藏文件
- max_depth (integer) (可选): 最大递归深度

## multiedit
多重编辑工具 - 这是一个在单个操作中对单个文件进行多次编辑的工具。它建立在EditTool之上，允许您高效地执行多个查找和替换操作。当您需要对同一文件进行多次编辑时，优先使用此工具而不是EditTool。

使用此工具之前：
- 使用Read工具了解文件的内容和上下文
- 验证目录路径是否正确

要进行多个文件编辑，请提供以下内容：
- filePath: 要修改的文件的绝对路径（必须是绝对路径，不是相对路径）
- edits: 要执行的编辑操作数组，其中每个编辑包含：
  - oldString: 要替换的文本（必须与文件内容完全匹配，包括所有空白和缩进）
  - newString: 替换oldString的编辑文本
  - replaceAll: 替换oldString的所有出现。此参数是可选的，默认为false

重要说明：
- 所有编辑按照提供的顺序依次应用
- 每个编辑在前一个编辑的结果上操作
- 所有编辑必须有效才能成功执行操作 - 如果任何编辑失败，则不会应用任何编辑
- 此工具非常适合需要对同一文件的不同部分进行多次更改的情况

关键要求：
1. 所有编辑都遵循与单个编辑工具相同的要求
2. 编辑是原子的 - 要么全部成功，要么全部不应用
3. 仔细规划您的编辑以避免顺序操作之间的冲突

警告：
- 如果edits.oldString与文件内容不完全匹配（包括空白），工具将失败
- 如果edits.oldString和edits.newString相同，工具将失败
- 由于编辑是按顺序应用的，请确保较早的编辑不会影响较晚编辑试图查找的文本

进行编辑时：
- 确保所有编辑都产生惯用的、正确的代码
- 不要让代码处于破损状态
- 使用replaceAll在整个文件中替换和重命名字符串。例如，如果您想重命名变量，此参数很有用

如果您想创建新文件：
- 使用新文件路径，如有需要包括目录名
- 第一次编辑：空的oldString和新文件的内容作为newString
- 后续编辑：对创建的内容进行正常的编辑操作

参数：
- filePath (string) (必需): 要修改的文件的绝对路径
- edits (array) (必需): 要在文件上按顺序执行的编辑操作数组

## read
从本地文件系统读取文件。您可以使用此工具直接访问任何文件。
假设此工具能够读取机器上的所有文件。如果用户提供文件路径，请假设该路径有效。读取不存在的文件是可以的；将返回错误。

用法：
- filePath 参数必须是绝对路径，不是相对路径
- 默认情况下，它从文件开头读取最多 2000 行
- 您可以选择指定行偏移量和限制（对于长文件特别方便），但建议通过不提供这些参数来读取整个文件
- 任何超过 2000 个字符的行都将被截断
- 输出为纯净的文件内容，不包含行号
- 此工具无法读取二进制文件，包括图像
- 您有能力在单个响应中调用多个工具。批量推测性地读取可能有用的多个文件总是更好的
- 如果您读取的文件存在但内容为空，您将收到系统提醒警告而不是文件内容

参数：
- filePath (string) (必需): 要读取的文件路径
- offset (number) (可选): 开始读取的行号（从0开始）
- limit (number) (可选): 要读取的行数（默认为2000）

## task
启动新代理以自主处理复杂的多步骤任务。

可用的代理类型及其可访问的工具：
- code_reviewer: 用于审查代码质量、发现潜在问题和建议改进的代理
- file_searcher: 专门用于搜索和分析文件内容的代理
- test_generator: 用于生成单元测试和集成测试的代理
- doc_generator: 用于生成和维护项目文档的代理
- refactor_agent: 用于代码重构和优化的代理

使用 Task 工具时，您必须指定 subagent_type 参数来选择要使用的代理类型。

何时使用 Agent 工具：
- 当您被指示执行自定义斜杠命令时。使用 Agent 工具，将斜杠命令调用作为整个提示。斜杠命令可以接受参数。例如：Task(description="检查文件", prompt="/check-file path/to/file.py")

何时不使用 Agent 工具：
- 如果您想读取特定文件路径，请使用 Read 或 Glob 工具而不是 Agent 工具，以更快地找到匹配项
- 如果您正在搜索特定的类定义，如"class Foo"，请使用 Glob 工具，以更快地找到匹配项
- 如果您正在特定文件或 2-3 个文件集中搜索代码，请使用 Read 工具而不是 Agent 工具，以更快地找到匹配项
- 与上述代理描述无关的其他任务

使用说明：
1. 尽可能同时启动多个代理，以最大化性能；为此，请在单个消息中使用多个工具
2. 代理完成后，它将向您返回单个消息。代理返回的结果对用户不可见。要向用户显示结果，您应该向用户发送包含结果简明摘要的文本消息
3. 每次代理调用都是无状态的。您将无法向代理发送其他消息，代理也无法在其最终报告之外与您通信。因此，您的提示应包含代理自主执行的高度详细的任务描述，并且您应该准确指定代理应在其最终且唯一的消息中向您返回什么信息
4. 代理的输出通常应该被信任
5. 清楚地告诉代理您是期望它编写代码还是只做研究（搜索、文件读取、网络获取等），因为它不知道用户的意图
6. 如果代理描述提到应该主动使用它，那么您应该尽力使用它，而不必让用户首先要求它。运用您的判断

参数：
- description (string) (必需): 任务的简短描述（3-5个词）
- prompt (string) (必需): 代理要执行的任务
- subagent_type (string) (必需): 用于此任务的专门代理类型

## todoread
使用此工具读取会话的当前待办事项列表。应该主动且频繁地使用此工具，以确保您了解当前任务列表的状态。您应该尽可能经常使用此工具，特别是在以下情况下：
- 在对话开始时查看待处理的事项
- 在开始新任务之前确定工作优先级
- 当用户询问以前的任务或计划时
- 当您不确定下一步要做什么时
- 完成任务后更新您对剩余工作的理解
- 每隔几条消息后确保您在正确的轨道上

用法：
- 此工具不接受参数。所以输入留空。不要包含虚拟对象、占位符字符串或"input"或"empty"等键。留空即可
- 返回带有状态、优先级和内容的待办事项列表
- 使用此信息跟踪进度并规划下一步
- 如果尚不存在待办事项，将返回空列表

## todowrite
使用此工具创建和管理当前编码会话的结构化任务列表。这有助于跟踪进度、组织复杂任务并向用户展示全面性。
它还帮助用户了解任务的进度和整体请求进展。

## 何时使用此工具
在以下场景中主动使用此工具：

1. 复杂的多步骤任务 - 当任务需要3个或更多不同的步骤或操作时
2. 非平凡和复杂的任务 - 需要仔细规划或多个操作的任务
3. 用户明确请求待办事项列表 - 当用户直接要求您使用待办事项列表时
4. 用户提供多个任务 - 当用户提供要完成的事项列表时（编号或逗号分隔）
5. 收到新指令后 - 立即将用户需求捕获为待办事项。根据新信息随时编辑待办事项列表
6. 完成任务后 - 标记为完成并添加任何新的后续任务
7. 开始处理新任务时，将待办事项标记为 in_progress。理想情况下，您应该一次只有一个待办事项为 in_progress 状态。在开始新任务之前完成现有任务

## 何时不使用此工具

在以下情况下跳过使用此工具：
1. 只有一个简单直接的任务
2. 任务很琐碎，跟踪它没有组织上的好处
3. 任务可以在少于3个琐碎步骤中完成
4. 任务纯粹是对话性或信息性的

注意：如果只有一个琐碎的任务要做，您不应该使用此工具。在这种情况下，最好直接完成任务。

## 任务状态和管理

1. **任务状态**：使用这些状态跟踪进度：
   - pending: 任务尚未开始
   - in_progress: 当前正在处理（一次限制一个任务）
   - completed: 任务成功完成
   - cancelled: 任务不再需要

2. **任务管理**：
   - 在工作时实时更新任务状态
   - 完成后立即标记任务完成（不要批量完成）
   - 任何时候只有一个任务处于 in_progress 状态
   - 在开始新任务之前完成当前任务
   - 取消变得不相关的任务

3. **任务分解**：
   - 创建具体、可操作的项目
   - 将复杂任务分解为更小、可管理的步骤
   - 使用清晰、描述性的任务名称

如有疑问，请使用此工具。主动的任务管理展示了细心，并确保您成功完成所有要求。

参数：
- todos (array) (必需): 更新的待办事项列表

## webfetch
从指定的 URL 获取内容。

功能特性：
- 从有效的 URL 获取和分析网页内容
- 支持多种输出格式（text、markdown、html）
- 自动处理 HTML 到 Markdown 的转换
- 内置 15 分钟缓存机制，提高重复访问效率
- 支持自定义超时设置

使用说明：
- 重要：如果有可用的 MCP 提供的网页获取工具，请优先使用那个工具，因为它可能有更少的限制。所有 MCP 提供的工具都以 "mcp__" 开头
- URL 必须是完整有效的 URL
- HTTP URL 将自动升级为 HTTPS
- 此工具是只读的，不会修改任何文件
- 如果内容很大，结果可能会被总结
- 包含自清理的 15 分钟缓存，以便在重复访问同一 URL 时获得更快的响应

参数：
- url (string) (必需): 要获取内容的 URL
- format (string) (必需): 返回内容的格式（text、markdown 或 html）
- timeout (number) (可选): 可选的超时时间（秒，最大 120）

## websearch
使用 DuckDuckGo 搜索引擎进行网络搜索。

功能特性：
- 使用 DuckDuckGo 搜索引擎进行网络搜索
- 支持多种搜索类型（网页、新闻、图片等）
- 返回结构化的搜索结果
- 包含标题、URL、摘要等信息
- 支持搜索结果数量限制

使用说明：
- 提供搜索查询词
- 可以指定搜索类型和结果数量
- 搜索结果包含相关网页的标题、URL 和摘要
- 适用于获取最新信息和研究主题

参数：
- query (string) (必需): 搜索查询词
- max_results (integer) (可选): 最大搜索结果数量
- region (string) (可选): 搜索区域（如 'us-en', 'zh-cn'）
- safesearch (string) (可选): 安全搜索设置
- timelimit (string) (可选): 时间限制（d=天，w=周，m=月，y=年）

## write
将文件写入本地文件系统。

用法：
- 如果提供的路径已存在文件，此工具将覆盖现有文件
- 如果这是现有文件，您必须首先使用 Read 工具读取文件的内容。如果您没有先读取文件，此工具将失败
- 始终优先编辑代码库中的现有文件。除非明确要求，否则切勿编写新文件
- 切勿主动创建文档文件（*.md）或 README 文件。仅在用户明确要求时创建文档文件
- 仅在用户明确要求时使用表情符号。除非被要求，否则避免将表情符号写入文件

参数：
- filePath (string) (必需): 要写入的文件的绝对路径（必须是绝对路径，不是相对路径）
- content (string) (必需): 要写入文件的内容


# 工具调用格式

当你需要使用工具时，请使用以下格式：

思考：[你的分析和推理]

行动：{"tool": "工具名称", "parameters": {"参数名": "参数值"}}

然后等待观察结果，再决定下一步行动或给出最终答案。

示例：
思考：用户想要查看当前目录的文件，我需要使用list工具。

行动：{"tool": "list", "parameters": {"path": "/absolute/path/to/directory"}}
